/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TransfertecNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCompany"
      | "addResearcher"
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "getCompanies"
      | "getResearchers"
      | "getTechnology"
      | "isApprovedForAll"
      | "isCompany"
      | "isResearcher"
      | "licenseTechnology"
      | "mint"
      | "name"
      | "owner"
      | "ownerOf"
      | "registerTechnology"
      | "removeCompany"
      | "removeResearcher"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "updateTechnology"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "CompanyAdded"
      | "CompanyRemoved"
      | "Licensed"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "ResearcherAdded"
      | "ResearcherRemoved"
      | "TechnologyRegistered"
      | "TechnologyUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCompany",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addResearcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResearchers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTechnology",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompany",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isResearcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseTechnology",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTechnology",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCompany",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeResearcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTechnology",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addCompany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addResearcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResearchers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTechnology",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCompany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isResearcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenseTechnology",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTechnology",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeResearcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTechnology",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompanyAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompanyRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicensedEvent {
  export type InputTuple = [
    licensee: AddressLike,
    tokenId: BigNumberish,
    technologyId: BigNumberish,
    priceWei: BigNumberish
  ];
  export type OutputTuple = [
    licensee: string,
    tokenId: bigint,
    technologyId: bigint,
    priceWei: bigint
  ];
  export interface OutputObject {
    licensee: string;
    tokenId: bigint;
    technologyId: bigint;
    priceWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResearcherAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResearcherRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TechnologyRegisteredEvent {
  export type InputTuple = [
    technologyId: BigNumberish,
    priceWei: BigNumberish,
    isExclusive: boolean,
    tokenURI: string
  ];
  export type OutputTuple = [
    technologyId: bigint,
    priceWei: bigint,
    isExclusive: boolean,
    tokenURI: string
  ];
  export interface OutputObject {
    technologyId: bigint;
    priceWei: bigint;
    isExclusive: boolean;
    tokenURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TechnologyUpdatedEvent {
  export type InputTuple = [
    technologyId: BigNumberish,
    priceWei: BigNumberish,
    isExclusive: boolean,
    tokenURI: string
  ];
  export type OutputTuple = [
    technologyId: bigint,
    priceWei: bigint,
    isExclusive: boolean,
    tokenURI: string
  ];
  export interface OutputObject {
    technologyId: bigint;
    priceWei: bigint;
    isExclusive: boolean;
    tokenURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TransfertecNFT extends BaseContract {
  connect(runner?: ContractRunner | null): TransfertecNFT;
  waitForDeployment(): Promise<this>;

  interface: TransfertecNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCompany: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  addResearcher: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCompanies: TypedContractMethod<[], [string[]], "view">;

  getResearchers: TypedContractMethod<[], [string[]], "view">;

  getTechnology: TypedContractMethod<
    [technologyId: BigNumberish],
    [
      [string, bigint, boolean, boolean, boolean, bigint] & {
        tokenURI: string;
        priceWei: bigint;
        isExclusive: boolean;
        isRegistered: boolean;
        exclusiveLicensed: boolean;
        totalLicenses: bigint;
      }
    ],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isCompany: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isResearcher: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  licenseTechnology: TypedContractMethod<
    [technologyId: BigNumberish],
    [bigint],
    "payable"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, tokenURI: string],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  registerTechnology: TypedContractMethod<
    [
      technologyId: BigNumberish,
      tokenURI: string,
      priceWei: BigNumberish,
      isExclusive: boolean
    ],
    [void],
    "nonpayable"
  >;

  removeCompany: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeResearcher: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTechnology: TypedContractMethod<
    [
      technologyId: BigNumberish,
      tokenURI: string,
      priceWei: BigNumberish,
      isExclusive: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCompany"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addResearcher"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCompanies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getResearchers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTechnology"
  ): TypedContractMethod<
    [technologyId: BigNumberish],
    [
      [string, bigint, boolean, boolean, boolean, bigint] & {
        tokenURI: string;
        priceWei: bigint;
        isExclusive: boolean;
        isRegistered: boolean;
        exclusiveLicensed: boolean;
        totalLicenses: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCompany"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isResearcher"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "licenseTechnology"
  ): TypedContractMethod<[technologyId: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, tokenURI: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registerTechnology"
  ): TypedContractMethod<
    [
      technologyId: BigNumberish,
      tokenURI: string,
      priceWei: BigNumberish,
      isExclusive: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCompany"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeResearcher"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTechnology"
  ): TypedContractMethod<
    [
      technologyId: BigNumberish,
      tokenURI: string,
      priceWei: BigNumberish,
      isExclusive: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "CompanyAdded"
  ): TypedContractEvent<
    CompanyAddedEvent.InputTuple,
    CompanyAddedEvent.OutputTuple,
    CompanyAddedEvent.OutputObject
  >;
  getEvent(
    key: "CompanyRemoved"
  ): TypedContractEvent<
    CompanyRemovedEvent.InputTuple,
    CompanyRemovedEvent.OutputTuple,
    CompanyRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Licensed"
  ): TypedContractEvent<
    LicensedEvent.InputTuple,
    LicensedEvent.OutputTuple,
    LicensedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ResearcherAdded"
  ): TypedContractEvent<
    ResearcherAddedEvent.InputTuple,
    ResearcherAddedEvent.OutputTuple,
    ResearcherAddedEvent.OutputObject
  >;
  getEvent(
    key: "ResearcherRemoved"
  ): TypedContractEvent<
    ResearcherRemovedEvent.InputTuple,
    ResearcherRemovedEvent.OutputTuple,
    ResearcherRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TechnologyRegistered"
  ): TypedContractEvent<
    TechnologyRegisteredEvent.InputTuple,
    TechnologyRegisteredEvent.OutputTuple,
    TechnologyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TechnologyUpdated"
  ): TypedContractEvent<
    TechnologyUpdatedEvent.InputTuple,
    TechnologyUpdatedEvent.OutputTuple,
    TechnologyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "CompanyAdded(address)": TypedContractEvent<
      CompanyAddedEvent.InputTuple,
      CompanyAddedEvent.OutputTuple,
      CompanyAddedEvent.OutputObject
    >;
    CompanyAdded: TypedContractEvent<
      CompanyAddedEvent.InputTuple,
      CompanyAddedEvent.OutputTuple,
      CompanyAddedEvent.OutputObject
    >;

    "CompanyRemoved(address)": TypedContractEvent<
      CompanyRemovedEvent.InputTuple,
      CompanyRemovedEvent.OutputTuple,
      CompanyRemovedEvent.OutputObject
    >;
    CompanyRemoved: TypedContractEvent<
      CompanyRemovedEvent.InputTuple,
      CompanyRemovedEvent.OutputTuple,
      CompanyRemovedEvent.OutputObject
    >;

    "Licensed(address,uint256,uint256,uint256)": TypedContractEvent<
      LicensedEvent.InputTuple,
      LicensedEvent.OutputTuple,
      LicensedEvent.OutputObject
    >;
    Licensed: TypedContractEvent<
      LicensedEvent.InputTuple,
      LicensedEvent.OutputTuple,
      LicensedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ResearcherAdded(address)": TypedContractEvent<
      ResearcherAddedEvent.InputTuple,
      ResearcherAddedEvent.OutputTuple,
      ResearcherAddedEvent.OutputObject
    >;
    ResearcherAdded: TypedContractEvent<
      ResearcherAddedEvent.InputTuple,
      ResearcherAddedEvent.OutputTuple,
      ResearcherAddedEvent.OutputObject
    >;

    "ResearcherRemoved(address)": TypedContractEvent<
      ResearcherRemovedEvent.InputTuple,
      ResearcherRemovedEvent.OutputTuple,
      ResearcherRemovedEvent.OutputObject
    >;
    ResearcherRemoved: TypedContractEvent<
      ResearcherRemovedEvent.InputTuple,
      ResearcherRemovedEvent.OutputTuple,
      ResearcherRemovedEvent.OutputObject
    >;

    "TechnologyRegistered(uint256,uint256,bool,string)": TypedContractEvent<
      TechnologyRegisteredEvent.InputTuple,
      TechnologyRegisteredEvent.OutputTuple,
      TechnologyRegisteredEvent.OutputObject
    >;
    TechnologyRegistered: TypedContractEvent<
      TechnologyRegisteredEvent.InputTuple,
      TechnologyRegisteredEvent.OutputTuple,
      TechnologyRegisteredEvent.OutputObject
    >;

    "TechnologyUpdated(uint256,uint256,bool,string)": TypedContractEvent<
      TechnologyUpdatedEvent.InputTuple,
      TechnologyUpdatedEvent.OutputTuple,
      TechnologyUpdatedEvent.OutputObject
    >;
    TechnologyUpdated: TypedContractEvent<
      TechnologyUpdatedEvent.InputTuple,
      TechnologyUpdatedEvent.OutputTuple,
      TechnologyUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
